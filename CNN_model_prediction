import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.neural_network import MLPClassifier
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report, confusion_matrix

! kaggle datasets download -d thebumpkin/10400-classic-hits-10-genres-1923-to-2023 --unzip

df = pd.read_csv("ClassicHit.csv")
df.columns = df.columns.str.strip().str.replace('"', '')
df.head()

# Specify features and target
X = df[['Danceability', 'Energy', 'Loudness', 'Speechiness',
          'Acousticness', 'Instrumentalness', 'Liveness', 'Valence',
          'Tempo', 'Popularity']].values
y = df['Genre'].values

# Normalize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)


# Initialize the MLPClassifier NN model
cnn_model = MLPClassifier(
    hidden_layer_sizes=(100,),  # One hidden layer with 100 neurons
    activation='relu',
    solver='adam',              # for weight optimization
    max_iter=500,               # Set # of epochs
    random_state=42             # Set reproducibility
)


#train the model
cnn_model.fit(X_train, y_train)

#predict
y_pred_nn = cnn_model.predict(X_test)

print("Classification Report:")
print(classification_report(y_test, y_pred_nn, zero_division=0))

# Create the confusion matrix
cm = confusion_matrix(y_test, y_pred_nn, labels=cnn_model.classes_)

plt.figure(figsize=(10, 8))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", 
            xticklabels=cnn_model.classes_, 
            yticklabels=cnn_model.classes_) 
plt.title("Confusion Matrix for Music Genre Classification")
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()

4. Convolutional Neural Network (CNN)
# ================================

# Ensure proper reshaping for CNN input
# Determine grid dimensions based on the number of features (16 in this case)
num_features = X_train.shape[1]
height, width = 4, 4  # Adjust dimensions to fit 16 features (4x4 grid)

# Validate that reshaping dimensions are correct
if height * width != num_features:
    raise ValueError(f"Cannot reshape data of {num_features} features into {height}x{width} grid")

# Reshape features for CNN (4x4 grid with 1 channel)
X_train_cnn = X_train.reshape(-1, height, width, 1)
X_test_cnn = X_test.reshape(-1, height, width, 1)

# Define CNN architecture
cnn_model = Sequential([
    Conv2D(32, (2, 2), activation='relu', input_shape=(height, width, 1)),
    MaxPooling2D(pool_size=(2, 2)),
    Dropout(0.3),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.3),
    Dense(len(label_encoder.classes_), activation='softmax')
])

# Compile CNN model
cnn_model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train CNN model
cnn_model.fit(X_train_cnn, y_train, validation_data=(X_test_cnn, y_test), epochs=20, batch_size=32)

# Evaluate CNN model
cnn_loss, cnn_accuracy = cnn_model.evaluate(X_test_cnn, y_test)
print(f"CNN Accuracy: {cnn_accuracy:.3f}")

